// Code generated by MockGen. DO NOT EDIT.
// Source: internal/metrics/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/metrics/interfaces.go -destination=internal/metrics/mocks.go -package=metrics
//

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockmetricsLogger is a mock of metricsLogger interface.
type MockmetricsLogger struct {
	ctrl     *gomock.Controller
	recorder *MockmetricsLoggerMockRecorder
	isgomock struct{}
}

// MockmetricsLoggerMockRecorder is the mock recorder for MockmetricsLogger.
type MockmetricsLoggerMockRecorder struct {
	mock *MockmetricsLogger
}

// NewMockmetricsLogger creates a new mock instance.
func NewMockmetricsLogger(ctrl *gomock.Controller) *MockmetricsLogger {
	mock := &MockmetricsLogger{ctrl: ctrl}
	mock.recorder = &MockmetricsLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmetricsLogger) EXPECT() *MockmetricsLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockmetricsLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockmetricsLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockmetricsLogger)(nil).Error), varargs...)
}

// Warn mocks base method.
func (m *MockmetricsLogger) Warn(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockmetricsLoggerMockRecorder) Warn(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockmetricsLogger)(nil).Warn), varargs...)
}
