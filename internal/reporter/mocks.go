// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/reporter/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/reporter/interfaces.go -destination=./internal/reporter/mocks.go -package=reporter
//

// Package reporter is a generated GoMock package.
package reporter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReporterLogger is a mock of ReporterLogger interface.
type MockReporterLogger struct {
	ctrl     *gomock.Controller
	recorder *MockReporterLoggerMockRecorder
	isgomock struct{}
}

// MockReporterLoggerMockRecorder is the mock recorder for MockReporterLogger.
type MockReporterLoggerMockRecorder struct {
	mock *MockReporterLogger
}

// NewMockReporterLogger creates a new mock instance.
func NewMockReporterLogger(ctrl *gomock.Controller) *MockReporterLogger {
	mock := &MockReporterLogger{ctrl: ctrl}
	mock.recorder = &MockReporterLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReporterLogger) EXPECT() *MockReporterLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockReporterLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockReporterLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockReporterLogger)(nil).Info), varargs...)
}

// MockMetricsReporter is a mock of MetricsReporter interface.
type MockMetricsReporter struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsReporterMockRecorder
	isgomock struct{}
}

// MockMetricsReporterMockRecorder is the mock recorder for MockMetricsReporter.
type MockMetricsReporterMockRecorder struct {
	mock *MockMetricsReporter
}

// NewMockMetricsReporter creates a new mock instance.
func NewMockMetricsReporter(ctrl *gomock.Controller) *MockMetricsReporter {
	mock := &MockMetricsReporter{ctrl: ctrl}
	mock.recorder = &MockMetricsReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsReporter) EXPECT() *MockMetricsReporterMockRecorder {
	return m.recorder
}

// SendMetrics mocks base method.
func (m *MockMetricsReporter) SendMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMetrics")
}

// SendMetrics indicates an expected call of SendMetrics.
func (mr *MockMetricsReporterMockRecorder) SendMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetrics", reflect.TypeOf((*MockMetricsReporter)(nil).SendMetrics))
}
