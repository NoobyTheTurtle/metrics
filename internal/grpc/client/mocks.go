// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/grpc/client/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/grpc/client/interfaces.go -destination=./internal/grpc/client/mocks.go -package=client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	model "github.com/NoobyTheTurtle/metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsClient is a mock of MetricsClient interface.
type MockMetricsClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsClientMockRecorder
	isgomock struct{}
}

// MockMetricsClientMockRecorder is the mock recorder for MockMetricsClient.
type MockMetricsClientMockRecorder struct {
	mock *MockMetricsClient
}

// NewMockMetricsClient creates a new mock instance.
func NewMockMetricsClient(ctrl *gomock.Controller) *MockMetricsClient {
	mock := &MockMetricsClient{ctrl: ctrl}
	mock.recorder = &MockMetricsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsClient) EXPECT() *MockMetricsClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricsClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricsClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricsClient)(nil).Close))
}

// Ping mocks base method.
func (m *MockMetricsClient) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricsClientMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricsClient)(nil).Ping), ctx)
}

// UpdateMetric mocks base method.
func (m *MockMetricsClient) UpdateMetric(ctx context.Context, metric *model.Metric) (*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", ctx, metric)
	ret0, _ := ret[0].(*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsClientMockRecorder) UpdateMetric(ctx, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetric), ctx, metric)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsClient) UpdateMetrics(ctx context.Context, metrics model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsClientMockRecorder) UpdateMetrics(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsClient)(nil).UpdateMetrics), ctx, metrics)
}

// MockGRPCLogger is a mock of GRPCLogger interface.
type MockGRPCLogger struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCLoggerMockRecorder
	isgomock struct{}
}

// MockGRPCLoggerMockRecorder is the mock recorder for MockGRPCLogger.
type MockGRPCLoggerMockRecorder struct {
	mock *MockGRPCLogger
}

// NewMockGRPCLogger creates a new mock instance.
func NewMockGRPCLogger(ctrl *gomock.Controller) *MockGRPCLogger {
	mock := &MockGRPCLogger{ctrl: ctrl}
	mock.recorder = &MockGRPCLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCLogger) EXPECT() *MockGRPCLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockGRPCLogger) Debug(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockGRPCLoggerMockRecorder) Debug(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockGRPCLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockGRPCLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockGRPCLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockGRPCLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockGRPCLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockGRPCLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockGRPCLogger)(nil).Info), varargs...)
}
