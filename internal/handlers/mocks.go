// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/handlers/interfaces.go -destination=internal/handlers/mocks.go -package=handlers
//

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGaugeGetter is a mock of GaugeGetter interface.
type MockGaugeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeGetterMockRecorder
	isgomock struct{}
}

// MockGaugeGetterMockRecorder is the mock recorder for MockGaugeGetter.
type MockGaugeGetterMockRecorder struct {
	mock *MockGaugeGetter
}

// NewMockGaugeGetter creates a new mock instance.
func NewMockGaugeGetter(ctrl *gomock.Controller) *MockGaugeGetter {
	mock := &MockGaugeGetter{ctrl: ctrl}
	mock.recorder = &MockGaugeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeGetter) EXPECT() *MockGaugeGetterMockRecorder {
	return m.recorder
}

// GetGauge mocks base method.
func (m *MockGaugeGetter) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeGetterMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeGetter)(nil).GetGauge), name)
}

// MockGaugeSetter is a mock of GaugeSetter interface.
type MockGaugeSetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeSetterMockRecorder
	isgomock struct{}
}

// MockGaugeSetterMockRecorder is the mock recorder for MockGaugeSetter.
type MockGaugeSetterMockRecorder struct {
	mock *MockGaugeSetter
}

// NewMockGaugeSetter creates a new mock instance.
func NewMockGaugeSetter(ctrl *gomock.Controller) *MockGaugeSetter {
	mock := &MockGaugeSetter{ctrl: ctrl}
	mock.recorder = &MockGaugeSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeSetter) EXPECT() *MockGaugeSetterMockRecorder {
	return m.recorder
}

// UpdateGauge mocks base method.
func (m *MockGaugeSetter) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeSetterMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeSetter)(nil).UpdateGauge), name, value)
}

// MockGaugesGetter is a mock of GaugesGetter interface.
type MockGaugesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugesGetterMockRecorder
	isgomock struct{}
}

// MockGaugesGetterMockRecorder is the mock recorder for MockGaugesGetter.
type MockGaugesGetterMockRecorder struct {
	mock *MockGaugesGetter
}

// NewMockGaugesGetter creates a new mock instance.
func NewMockGaugesGetter(ctrl *gomock.Controller) *MockGaugesGetter {
	mock := &MockGaugesGetter{ctrl: ctrl}
	mock.recorder = &MockGaugesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugesGetter) EXPECT() *MockGaugesGetterMockRecorder {
	return m.recorder
}

// GetAllGauges mocks base method.
func (m *MockGaugesGetter) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockGaugesGetterMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockGaugesGetter)(nil).GetAllGauges))
}

// MockCounterGetter is a mock of CounterGetter interface.
type MockCounterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterGetterMockRecorder
	isgomock struct{}
}

// MockCounterGetterMockRecorder is the mock recorder for MockCounterGetter.
type MockCounterGetterMockRecorder struct {
	mock *MockCounterGetter
}

// NewMockCounterGetter creates a new mock instance.
func NewMockCounterGetter(ctrl *gomock.Controller) *MockCounterGetter {
	mock := &MockCounterGetter{ctrl: ctrl}
	mock.recorder = &MockCounterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterGetter) EXPECT() *MockCounterGetterMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockCounterGetter) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterGetterMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterGetter)(nil).GetCounter), name)
}

// MockCounterSetter is a mock of CounterSetter interface.
type MockCounterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterSetterMockRecorder
	isgomock struct{}
}

// MockCounterSetterMockRecorder is the mock recorder for MockCounterSetter.
type MockCounterSetterMockRecorder struct {
	mock *MockCounterSetter
}

// NewMockCounterSetter creates a new mock instance.
func NewMockCounterSetter(ctrl *gomock.Controller) *MockCounterSetter {
	mock := &MockCounterSetter{ctrl: ctrl}
	mock.recorder = &MockCounterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterSetter) EXPECT() *MockCounterSetterMockRecorder {
	return m.recorder
}

// UpdateCounter mocks base method.
func (m *MockCounterSetter) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterSetterMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterSetter)(nil).UpdateCounter), name, value)
}

// MockCountersGetter is a mock of CountersGetter interface.
type MockCountersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCountersGetterMockRecorder
	isgomock struct{}
}

// MockCountersGetterMockRecorder is the mock recorder for MockCountersGetter.
type MockCountersGetterMockRecorder struct {
	mock *MockCountersGetter
}

// NewMockCountersGetter creates a new mock instance.
func NewMockCountersGetter(ctrl *gomock.Controller) *MockCountersGetter {
	mock := &MockCountersGetter{ctrl: ctrl}
	mock.recorder = &MockCountersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountersGetter) EXPECT() *MockCountersGetterMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockCountersGetter) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockCountersGetterMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockCountersGetter)(nil).GetAllCounters))
}

// MockGaugeStorage is a mock of GaugeStorage interface.
type MockGaugeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeStorageMockRecorder
	isgomock struct{}
}

// MockGaugeStorageMockRecorder is the mock recorder for MockGaugeStorage.
type MockGaugeStorageMockRecorder struct {
	mock *MockGaugeStorage
}

// NewMockGaugeStorage creates a new mock instance.
func NewMockGaugeStorage(ctrl *gomock.Controller) *MockGaugeStorage {
	mock := &MockGaugeStorage{ctrl: ctrl}
	mock.recorder = &MockGaugeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeStorage) EXPECT() *MockGaugeStorageMockRecorder {
	return m.recorder
}

// GetAllGauges mocks base method.
func (m *MockGaugeStorage) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockGaugeStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockGaugeStorage)(nil).GetAllGauges))
}

// GetGauge mocks base method.
func (m *MockGaugeStorage) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeStorage)(nil).GetGauge), name)
}

// UpdateGauge mocks base method.
func (m *MockGaugeStorage) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeStorageMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeStorage)(nil).UpdateGauge), name, value)
}

// MockCounterStorage is a mock of CounterStorage interface.
type MockCounterStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCounterStorageMockRecorder
	isgomock struct{}
}

// MockCounterStorageMockRecorder is the mock recorder for MockCounterStorage.
type MockCounterStorageMockRecorder struct {
	mock *MockCounterStorage
}

// NewMockCounterStorage creates a new mock instance.
func NewMockCounterStorage(ctrl *gomock.Controller) *MockCounterStorage {
	mock := &MockCounterStorage{ctrl: ctrl}
	mock.recorder = &MockCounterStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterStorage) EXPECT() *MockCounterStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockCounterStorage) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockCounterStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockCounterStorage)(nil).GetAllCounters))
}

// GetCounter mocks base method.
func (m *MockCounterStorage) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterStorage)(nil).GetCounter), name)
}

// UpdateCounter mocks base method.
func (m *MockCounterStorage) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterStorageMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterStorage)(nil).UpdateCounter), name, value)
}

// MockServerStorage is a mock of ServerStorage interface.
type MockServerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockServerStorageMockRecorder
	isgomock struct{}
}

// MockServerStorageMockRecorder is the mock recorder for MockServerStorage.
type MockServerStorageMockRecorder struct {
	mock *MockServerStorage
}

// NewMockServerStorage creates a new mock instance.
func NewMockServerStorage(ctrl *gomock.Controller) *MockServerStorage {
	mock := &MockServerStorage{ctrl: ctrl}
	mock.recorder = &MockServerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerStorage) EXPECT() *MockServerStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockServerStorage) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockServerStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockServerStorage)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockServerStorage) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockServerStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockServerStorage)(nil).GetAllGauges))
}

// GetCounter mocks base method.
func (m *MockServerStorage) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockServerStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockServerStorage)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockServerStorage) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockServerStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockServerStorage)(nil).GetGauge), name)
}

// UpdateCounter mocks base method.
func (m *MockServerStorage) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockServerStorageMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockServerStorage)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockServerStorage) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockServerStorageMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockServerStorage)(nil).UpdateGauge), name, value)
}

// MockHandlersLogger is a mock of HandlersLogger interface.
type MockHandlersLogger struct {
	ctrl     *gomock.Controller
	recorder *MockHandlersLoggerMockRecorder
	isgomock struct{}
}

// MockHandlersLoggerMockRecorder is the mock recorder for MockHandlersLogger.
type MockHandlersLoggerMockRecorder struct {
	mock *MockHandlersLogger
}

// NewMockHandlersLogger creates a new mock instance.
func NewMockHandlersLogger(ctrl *gomock.Controller) *MockHandlersLogger {
	mock := &MockHandlersLogger{ctrl: ctrl}
	mock.recorder = &MockHandlersLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlersLogger) EXPECT() *MockHandlersLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockHandlersLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockHandlersLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockHandlersLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockHandlersLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockHandlersLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockHandlersLogger)(nil).Info), varargs...)
}
