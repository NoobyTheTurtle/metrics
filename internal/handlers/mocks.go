// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/handlers/interfaces.go -destination=internal/handlers/mocks.go -package=handlers
//

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockgaugeGetter is a mock of gaugeGetter interface.
type MockgaugeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockgaugeGetterMockRecorder
	isgomock struct{}
}

// MockgaugeGetterMockRecorder is the mock recorder for MockgaugeGetter.
type MockgaugeGetterMockRecorder struct {
	mock *MockgaugeGetter
}

// NewMockgaugeGetter creates a new mock instance.
func NewMockgaugeGetter(ctrl *gomock.Controller) *MockgaugeGetter {
	mock := &MockgaugeGetter{ctrl: ctrl}
	mock.recorder = &MockgaugeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgaugeGetter) EXPECT() *MockgaugeGetterMockRecorder {
	return m.recorder
}

// GetGauge mocks base method.
func (m *MockgaugeGetter) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockgaugeGetterMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockgaugeGetter)(nil).GetGauge), name)
}

// MockgaugeSetter is a mock of gaugeSetter interface.
type MockgaugeSetter struct {
	ctrl     *gomock.Controller
	recorder *MockgaugeSetterMockRecorder
	isgomock struct{}
}

// MockgaugeSetterMockRecorder is the mock recorder for MockgaugeSetter.
type MockgaugeSetterMockRecorder struct {
	mock *MockgaugeSetter
}

// NewMockgaugeSetter creates a new mock instance.
func NewMockgaugeSetter(ctrl *gomock.Controller) *MockgaugeSetter {
	mock := &MockgaugeSetter{ctrl: ctrl}
	mock.recorder = &MockgaugeSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgaugeSetter) EXPECT() *MockgaugeSetterMockRecorder {
	return m.recorder
}

// UpdateGauge mocks base method.
func (m *MockgaugeSetter) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockgaugeSetterMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockgaugeSetter)(nil).UpdateGauge), name, value)
}

// MockgaugesGetter is a mock of gaugesGetter interface.
type MockgaugesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockgaugesGetterMockRecorder
	isgomock struct{}
}

// MockgaugesGetterMockRecorder is the mock recorder for MockgaugesGetter.
type MockgaugesGetterMockRecorder struct {
	mock *MockgaugesGetter
}

// NewMockgaugesGetter creates a new mock instance.
func NewMockgaugesGetter(ctrl *gomock.Controller) *MockgaugesGetter {
	mock := &MockgaugesGetter{ctrl: ctrl}
	mock.recorder = &MockgaugesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgaugesGetter) EXPECT() *MockgaugesGetterMockRecorder {
	return m.recorder
}

// GetAllGauges mocks base method.
func (m *MockgaugesGetter) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockgaugesGetterMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockgaugesGetter)(nil).GetAllGauges))
}

// MockcounterGetter is a mock of counterGetter interface.
type MockcounterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcounterGetterMockRecorder
	isgomock struct{}
}

// MockcounterGetterMockRecorder is the mock recorder for MockcounterGetter.
type MockcounterGetterMockRecorder struct {
	mock *MockcounterGetter
}

// NewMockcounterGetter creates a new mock instance.
func NewMockcounterGetter(ctrl *gomock.Controller) *MockcounterGetter {
	mock := &MockcounterGetter{ctrl: ctrl}
	mock.recorder = &MockcounterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcounterGetter) EXPECT() *MockcounterGetterMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockcounterGetter) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockcounterGetterMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockcounterGetter)(nil).GetCounter), name)
}

// MockcounterSetter is a mock of counterSetter interface.
type MockcounterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockcounterSetterMockRecorder
	isgomock struct{}
}

// MockcounterSetterMockRecorder is the mock recorder for MockcounterSetter.
type MockcounterSetterMockRecorder struct {
	mock *MockcounterSetter
}

// NewMockcounterSetter creates a new mock instance.
func NewMockcounterSetter(ctrl *gomock.Controller) *MockcounterSetter {
	mock := &MockcounterSetter{ctrl: ctrl}
	mock.recorder = &MockcounterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcounterSetter) EXPECT() *MockcounterSetterMockRecorder {
	return m.recorder
}

// UpdateCounter mocks base method.
func (m *MockcounterSetter) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockcounterSetterMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockcounterSetter)(nil).UpdateCounter), name, value)
}

// MockcountersGetter is a mock of countersGetter interface.
type MockcountersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcountersGetterMockRecorder
	isgomock struct{}
}

// MockcountersGetterMockRecorder is the mock recorder for MockcountersGetter.
type MockcountersGetterMockRecorder struct {
	mock *MockcountersGetter
}

// NewMockcountersGetter creates a new mock instance.
func NewMockcountersGetter(ctrl *gomock.Controller) *MockcountersGetter {
	mock := &MockcountersGetter{ctrl: ctrl}
	mock.recorder = &MockcountersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcountersGetter) EXPECT() *MockcountersGetterMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockcountersGetter) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockcountersGetterMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockcountersGetter)(nil).GetAllCounters))
}

// MockgaugeStorage is a mock of gaugeStorage interface.
type MockgaugeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockgaugeStorageMockRecorder
	isgomock struct{}
}

// MockgaugeStorageMockRecorder is the mock recorder for MockgaugeStorage.
type MockgaugeStorageMockRecorder struct {
	mock *MockgaugeStorage
}

// NewMockgaugeStorage creates a new mock instance.
func NewMockgaugeStorage(ctrl *gomock.Controller) *MockgaugeStorage {
	mock := &MockgaugeStorage{ctrl: ctrl}
	mock.recorder = &MockgaugeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgaugeStorage) EXPECT() *MockgaugeStorageMockRecorder {
	return m.recorder
}

// GetAllGauges mocks base method.
func (m *MockgaugeStorage) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockgaugeStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockgaugeStorage)(nil).GetAllGauges))
}

// GetGauge mocks base method.
func (m *MockgaugeStorage) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockgaugeStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockgaugeStorage)(nil).GetGauge), name)
}

// UpdateGauge mocks base method.
func (m *MockgaugeStorage) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockgaugeStorageMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockgaugeStorage)(nil).UpdateGauge), name, value)
}

// MockcounterStorage is a mock of counterStorage interface.
type MockcounterStorage struct {
	ctrl     *gomock.Controller
	recorder *MockcounterStorageMockRecorder
	isgomock struct{}
}

// MockcounterStorageMockRecorder is the mock recorder for MockcounterStorage.
type MockcounterStorageMockRecorder struct {
	mock *MockcounterStorage
}

// NewMockcounterStorage creates a new mock instance.
func NewMockcounterStorage(ctrl *gomock.Controller) *MockcounterStorage {
	mock := &MockcounterStorage{ctrl: ctrl}
	mock.recorder = &MockcounterStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcounterStorage) EXPECT() *MockcounterStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockcounterStorage) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockcounterStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockcounterStorage)(nil).GetAllCounters))
}

// GetCounter mocks base method.
func (m *MockcounterStorage) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockcounterStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockcounterStorage)(nil).GetCounter), name)
}

// UpdateCounter mocks base method.
func (m *MockcounterStorage) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockcounterStorageMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockcounterStorage)(nil).UpdateCounter), name, value)
}

// MockserverStorage is a mock of serverStorage interface.
type MockserverStorage struct {
	ctrl     *gomock.Controller
	recorder *MockserverStorageMockRecorder
	isgomock struct{}
}

// MockserverStorageMockRecorder is the mock recorder for MockserverStorage.
type MockserverStorageMockRecorder struct {
	mock *MockserverStorage
}

// NewMockserverStorage creates a new mock instance.
func NewMockserverStorage(ctrl *gomock.Controller) *MockserverStorage {
	mock := &MockserverStorage{ctrl: ctrl}
	mock.recorder = &MockserverStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserverStorage) EXPECT() *MockserverStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockserverStorage) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockserverStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockserverStorage)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockserverStorage) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockserverStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockserverStorage)(nil).GetAllGauges))
}

// GetCounter mocks base method.
func (m *MockserverStorage) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockserverStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockserverStorage)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockserverStorage) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockserverStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockserverStorage)(nil).GetGauge), name)
}

// UpdateCounter mocks base method.
func (m *MockserverStorage) UpdateCounter(name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockserverStorageMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockserverStorage)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockserverStorage) UpdateGauge(name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockserverStorageMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockserverStorage)(nil).UpdateGauge), name, value)
}

// MockhandlersLogger is a mock of handlersLogger interface.
type MockhandlersLogger struct {
	ctrl     *gomock.Controller
	recorder *MockhandlersLoggerMockRecorder
	isgomock struct{}
}

// MockhandlersLoggerMockRecorder is the mock recorder for MockhandlersLogger.
type MockhandlersLoggerMockRecorder struct {
	mock *MockhandlersLogger
}

// NewMockhandlersLogger creates a new mock instance.
func NewMockhandlersLogger(ctrl *gomock.Controller) *MockhandlersLogger {
	mock := &MockhandlersLogger{ctrl: ctrl}
	mock.recorder = &MockhandlersLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhandlersLogger) EXPECT() *MockhandlersLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockhandlersLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockhandlersLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockhandlersLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockhandlersLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockhandlersLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockhandlersLogger)(nil).Info), varargs...)
}
