// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/metric/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/metric/interfaces.go -destination=./internal/metric/mocks.go -package=metric
//

// Package metric is a generated GoMock package.
package metric

import (
	context "context"
	reflect "reflect"

	model "github.com/NoobyTheTurtle/metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricsLogger is a mock of MetricsLogger interface.
type MockMetricsLogger struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsLoggerMockRecorder
	isgomock struct{}
}

// MockMetricsLoggerMockRecorder is the mock recorder for MockMetricsLogger.
type MockMetricsLoggerMockRecorder struct {
	mock *MockMetricsLogger
}

// NewMockMetricsLogger creates a new mock instance.
func NewMockMetricsLogger(ctrl *gomock.Controller) *MockMetricsLogger {
	mock := &MockMetricsLogger{ctrl: ctrl}
	mock.recorder = &MockMetricsLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsLogger) EXPECT() *MockMetricsLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockMetricsLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockMetricsLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockMetricsLogger)(nil).Error), varargs...)
}

// Warn mocks base method.
func (m *MockMetricsLogger) Warn(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockMetricsLoggerMockRecorder) Warn(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockMetricsLogger)(nil).Warn), varargs...)
}

// MockEncrypter is a mock of Encrypter interface.
type MockEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterMockRecorder
	isgomock struct{}
}

// MockEncrypterMockRecorder is the mock recorder for MockEncrypter.
type MockEncrypterMockRecorder struct {
	mock *MockEncrypter
}

// NewMockEncrypter creates a new mock instance.
func NewMockEncrypter(ctrl *gomock.Controller) *MockEncrypter {
	mock := &MockEncrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypter) EXPECT() *MockEncrypterMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncrypter) Encrypt(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncrypterMockRecorder) Encrypt(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypter)(nil).Encrypt), data)
}

// MockMetricsTransport is a mock of MetricsTransport interface.
type MockMetricsTransport struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsTransportMockRecorder
	isgomock struct{}
}

// MockMetricsTransportMockRecorder is the mock recorder for MockMetricsTransport.
type MockMetricsTransportMockRecorder struct {
	mock *MockMetricsTransport
}

// NewMockMetricsTransport creates a new mock instance.
func NewMockMetricsTransport(ctrl *gomock.Controller) *MockMetricsTransport {
	mock := &MockMetricsTransport{ctrl: ctrl}
	mock.recorder = &MockMetricsTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsTransport) EXPECT() *MockMetricsTransportMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMetricsTransport) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMetricsTransportMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMetricsTransport)(nil).Close))
}

// SendMetrics mocks base method.
func (m *MockMetricsTransport) SendMetrics(ctx context.Context, metrics model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetrics indicates an expected call of SendMetrics.
func (mr *MockMetricsTransportMockRecorder) SendMetrics(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetrics", reflect.TypeOf((*MockMetricsTransport)(nil).SendMetrics), ctx, metrics)
}
