// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/postgres/query/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/postgres/query/interfaces.go -destination=./internal/storage/postgres/query/mocks.go -package=query
//

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockDBExecutor is a mock of DBExecutor interface.
type MockDBExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockDBExecutorMockRecorder
	isgomock struct{}
}

// MockDBExecutorMockRecorder is the mock recorder for MockDBExecutor.
type MockDBExecutorMockRecorder struct {
	mock *MockDBExecutor
}

// NewMockDBExecutor creates a new mock instance.
func NewMockDBExecutor(ctrl *gomock.Controller) *MockDBExecutor {
	mock := &MockDBExecutor{ctrl: ctrl}
	mock.recorder = &MockDBExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBExecutor) EXPECT() *MockDBExecutorMockRecorder {
	return m.recorder
}

// GetContext mocks base method.
func (m *MockDBExecutor) GetContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockDBExecutorMockRecorder) GetContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockDBExecutor)(nil).GetContext), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockDBExecutor) QueryRowxContext(ctx context.Context, query string, args ...any) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockDBExecutorMockRecorder) QueryRowxContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockDBExecutor)(nil).QueryRowxContext), varargs...)
}

// SelectContext mocks base method.
func (m *MockDBExecutor) SelectContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockDBExecutorMockRecorder) SelectContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockDBExecutor)(nil).SelectContext), varargs...)
}
