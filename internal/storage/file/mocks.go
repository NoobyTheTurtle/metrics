// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/file/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/storage/file/interfaces.go -destination=./internal/storage/file/mocks.go -package=file
//

// Package file is a generated GoMock package.
package file

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
	isgomock struct{}
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetter) Get(ctx context.Context, key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetterMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), ctx, key)
}

// MockSetter is a mock of Setter interface.
type MockSetter struct {
	ctrl     *gomock.Controller
	recorder *MockSetterMockRecorder
	isgomock struct{}
}

// MockSetterMockRecorder is the mock recorder for MockSetter.
type MockSetterMockRecorder struct {
	mock *MockSetter
}

// NewMockSetter creates a new mock instance.
func NewMockSetter(ctrl *gomock.Controller) *MockSetter {
	mock := &MockSetter{ctrl: ctrl}
	mock.recorder = &MockSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetter) EXPECT() *MockSetterMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockSetter) Set(ctx context.Context, key string, value any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockSetterMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSetter)(nil).Set), ctx, key, value)
}

// MockGetAll is a mock of GetAll interface.
type MockGetAll struct {
	ctrl     *gomock.Controller
	recorder *MockGetAllMockRecorder
	isgomock struct{}
}

// MockGetAllMockRecorder is the mock recorder for MockGetAll.
type MockGetAllMockRecorder struct {
	mock *MockGetAll
}

// NewMockGetAll creates a new mock instance.
func NewMockGetAll(ctrl *gomock.Controller) *MockGetAll {
	mock := &MockGetAll{ctrl: ctrl}
	mock.recorder = &MockGetAllMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetAll) EXPECT() *MockGetAllMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockGetAll) GetAll(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockGetAllMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGetAll)(nil).GetAll), ctx)
}

// MockMemStorage is a mock of MemStorage interface.
type MockMemStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMemStorageMockRecorder
	isgomock struct{}
}

// MockMemStorageMockRecorder is the mock recorder for MockMemStorage.
type MockMemStorageMockRecorder struct {
	mock *MockMemStorage
}

// NewMockMemStorage creates a new mock instance.
func NewMockMemStorage(ctrl *gomock.Controller) *MockMemStorage {
	mock := &MockMemStorage{ctrl: ctrl}
	mock.recorder = &MockMemStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemStorage) EXPECT() *MockMemStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMemStorage) Get(ctx context.Context, key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMemStorageMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemStorage)(nil).Get), ctx, key)
}

// GetAll mocks base method.
func (m *MockMemStorage) GetAll(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMemStorageMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMemStorage)(nil).GetAll), ctx)
}

// Set mocks base method.
func (m *MockMemStorage) Set(ctx context.Context, key string, value any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockMemStorageMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemStorage)(nil).Set), ctx, key, value)
}
