// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/html/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handler/html/interfaces.go -destination=./internal/handler/html/mocks.go -package=html
//

// Package html is a generated GoMock package.
package html

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGaugesGetter is a mock of GaugesGetter interface.
type MockGaugesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugesGetterMockRecorder
	isgomock struct{}
}

// MockGaugesGetterMockRecorder is the mock recorder for MockGaugesGetter.
type MockGaugesGetterMockRecorder struct {
	mock *MockGaugesGetter
}

// NewMockGaugesGetter creates a new mock instance.
func NewMockGaugesGetter(ctrl *gomock.Controller) *MockGaugesGetter {
	mock := &MockGaugesGetter{ctrl: ctrl}
	mock.recorder = &MockGaugesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugesGetter) EXPECT() *MockGaugesGetterMockRecorder {
	return m.recorder
}

// GetAllGauges mocks base method.
func (m *MockGaugesGetter) GetAllGauges(ctx context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockGaugesGetterMockRecorder) GetAllGauges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockGaugesGetter)(nil).GetAllGauges), ctx)
}

// MockCountersGetter is a mock of CountersGetter interface.
type MockCountersGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCountersGetterMockRecorder
	isgomock struct{}
}

// MockCountersGetterMockRecorder is the mock recorder for MockCountersGetter.
type MockCountersGetterMockRecorder struct {
	mock *MockCountersGetter
}

// NewMockCountersGetter creates a new mock instance.
func NewMockCountersGetter(ctrl *gomock.Controller) *MockCountersGetter {
	mock := &MockCountersGetter{ctrl: ctrl}
	mock.recorder = &MockCountersGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountersGetter) EXPECT() *MockCountersGetterMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockCountersGetter) GetAllCounters(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockCountersGetterMockRecorder) GetAllCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockCountersGetter)(nil).GetAllCounters), ctx)
}

// MockHandlerStorage is a mock of HandlerStorage interface.
type MockHandlerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerStorageMockRecorder
	isgomock struct{}
}

// MockHandlerStorageMockRecorder is the mock recorder for MockHandlerStorage.
type MockHandlerStorageMockRecorder struct {
	mock *MockHandlerStorage
}

// NewMockHandlerStorage creates a new mock instance.
func NewMockHandlerStorage(ctrl *gomock.Controller) *MockHandlerStorage {
	mock := &MockHandlerStorage{ctrl: ctrl}
	mock.recorder = &MockHandlerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerStorage) EXPECT() *MockHandlerStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockHandlerStorage) GetAllCounters(ctx context.Context) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters", ctx)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockHandlerStorageMockRecorder) GetAllCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockHandlerStorage)(nil).GetAllCounters), ctx)
}

// GetAllGauges mocks base method.
func (m *MockHandlerStorage) GetAllGauges(ctx context.Context) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges", ctx)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockHandlerStorageMockRecorder) GetAllGauges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockHandlerStorage)(nil).GetAllGauges), ctx)
}
