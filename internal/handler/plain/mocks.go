// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/plain/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handler/plain/interfaces.go -destination=./internal/handler/plain/mocks.go -package=plain
//

// Package plain is a generated GoMock package.
package plain

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGaugeGetter is a mock of GaugeGetter interface.
type MockGaugeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeGetterMockRecorder
	isgomock struct{}
}

// MockGaugeGetterMockRecorder is the mock recorder for MockGaugeGetter.
type MockGaugeGetterMockRecorder struct {
	mock *MockGaugeGetter
}

// NewMockGaugeGetter creates a new mock instance.
func NewMockGaugeGetter(ctrl *gomock.Controller) *MockGaugeGetter {
	mock := &MockGaugeGetter{ctrl: ctrl}
	mock.recorder = &MockGaugeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeGetter) EXPECT() *MockGaugeGetterMockRecorder {
	return m.recorder
}

// GetGauge mocks base method.
func (m *MockGaugeGetter) GetGauge(ctx context.Context, name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeGetterMockRecorder) GetGauge(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeGetter)(nil).GetGauge), ctx, name)
}

// MockGaugeSetter is a mock of GaugeSetter interface.
type MockGaugeSetter struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeSetterMockRecorder
	isgomock struct{}
}

// MockGaugeSetterMockRecorder is the mock recorder for MockGaugeSetter.
type MockGaugeSetterMockRecorder struct {
	mock *MockGaugeSetter
}

// NewMockGaugeSetter creates a new mock instance.
func NewMockGaugeSetter(ctrl *gomock.Controller) *MockGaugeSetter {
	mock := &MockGaugeSetter{ctrl: ctrl}
	mock.recorder = &MockGaugeSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeSetter) EXPECT() *MockGaugeSetterMockRecorder {
	return m.recorder
}

// UpdateGauge mocks base method.
func (m *MockGaugeSetter) UpdateGauge(ctx context.Context, name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeSetterMockRecorder) UpdateGauge(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeSetter)(nil).UpdateGauge), ctx, name, value)
}

// MockCounterGetter is a mock of CounterGetter interface.
type MockCounterGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterGetterMockRecorder
	isgomock struct{}
}

// MockCounterGetterMockRecorder is the mock recorder for MockCounterGetter.
type MockCounterGetterMockRecorder struct {
	mock *MockCounterGetter
}

// NewMockCounterGetter creates a new mock instance.
func NewMockCounterGetter(ctrl *gomock.Controller) *MockCounterGetter {
	mock := &MockCounterGetter{ctrl: ctrl}
	mock.recorder = &MockCounterGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterGetter) EXPECT() *MockCounterGetterMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockCounterGetter) GetCounter(ctx context.Context, name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterGetterMockRecorder) GetCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterGetter)(nil).GetCounter), ctx, name)
}

// MockCounterSetter is a mock of CounterSetter interface.
type MockCounterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterSetterMockRecorder
	isgomock struct{}
}

// MockCounterSetterMockRecorder is the mock recorder for MockCounterSetter.
type MockCounterSetterMockRecorder struct {
	mock *MockCounterSetter
}

// NewMockCounterSetter creates a new mock instance.
func NewMockCounterSetter(ctrl *gomock.Controller) *MockCounterSetter {
	mock := &MockCounterSetter{ctrl: ctrl}
	mock.recorder = &MockCounterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterSetter) EXPECT() *MockCounterSetterMockRecorder {
	return m.recorder
}

// UpdateCounter mocks base method.
func (m *MockCounterSetter) UpdateCounter(ctx context.Context, name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterSetterMockRecorder) UpdateCounter(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterSetter)(nil).UpdateCounter), ctx, name, value)
}

// MockGaugeStorage is a mock of GaugeStorage interface.
type MockGaugeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeStorageMockRecorder
	isgomock struct{}
}

// MockGaugeStorageMockRecorder is the mock recorder for MockGaugeStorage.
type MockGaugeStorageMockRecorder struct {
	mock *MockGaugeStorage
}

// NewMockGaugeStorage creates a new mock instance.
func NewMockGaugeStorage(ctrl *gomock.Controller) *MockGaugeStorage {
	mock := &MockGaugeStorage{ctrl: ctrl}
	mock.recorder = &MockGaugeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeStorage) EXPECT() *MockGaugeStorageMockRecorder {
	return m.recorder
}

// GetGauge mocks base method.
func (m *MockGaugeStorage) GetGauge(ctx context.Context, name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockGaugeStorageMockRecorder) GetGauge(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockGaugeStorage)(nil).GetGauge), ctx, name)
}

// UpdateGauge mocks base method.
func (m *MockGaugeStorage) UpdateGauge(ctx context.Context, name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugeStorageMockRecorder) UpdateGauge(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugeStorage)(nil).UpdateGauge), ctx, name, value)
}

// MockCounterStorage is a mock of CounterStorage interface.
type MockCounterStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCounterStorageMockRecorder
	isgomock struct{}
}

// MockCounterStorageMockRecorder is the mock recorder for MockCounterStorage.
type MockCounterStorageMockRecorder struct {
	mock *MockCounterStorage
}

// NewMockCounterStorage creates a new mock instance.
func NewMockCounterStorage(ctrl *gomock.Controller) *MockCounterStorage {
	mock := &MockCounterStorage{ctrl: ctrl}
	mock.recorder = &MockCounterStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterStorage) EXPECT() *MockCounterStorageMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockCounterStorage) GetCounter(ctx context.Context, name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockCounterStorageMockRecorder) GetCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockCounterStorage)(nil).GetCounter), ctx, name)
}

// UpdateCounter mocks base method.
func (m *MockCounterStorage) UpdateCounter(ctx context.Context, name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterStorageMockRecorder) UpdateCounter(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterStorage)(nil).UpdateCounter), ctx, name, value)
}

// MockHandlerStorage is a mock of HandlerStorage interface.
type MockHandlerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerStorageMockRecorder
	isgomock struct{}
}

// MockHandlerStorageMockRecorder is the mock recorder for MockHandlerStorage.
type MockHandlerStorageMockRecorder struct {
	mock *MockHandlerStorage
}

// NewMockHandlerStorage creates a new mock instance.
func NewMockHandlerStorage(ctrl *gomock.Controller) *MockHandlerStorage {
	mock := &MockHandlerStorage{ctrl: ctrl}
	mock.recorder = &MockHandlerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlerStorage) EXPECT() *MockHandlerStorageMockRecorder {
	return m.recorder
}

// GetCounter mocks base method.
func (m *MockHandlerStorage) GetCounter(ctx context.Context, name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", ctx, name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockHandlerStorageMockRecorder) GetCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockHandlerStorage)(nil).GetCounter), ctx, name)
}

// GetGauge mocks base method.
func (m *MockHandlerStorage) GetGauge(ctx context.Context, name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", ctx, name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockHandlerStorageMockRecorder) GetGauge(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockHandlerStorage)(nil).GetGauge), ctx, name)
}

// UpdateCounter mocks base method.
func (m *MockHandlerStorage) UpdateCounter(ctx context.Context, name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockHandlerStorageMockRecorder) UpdateCounter(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockHandlerStorage)(nil).UpdateCounter), ctx, name, value)
}

// UpdateGauge mocks base method.
func (m *MockHandlerStorage) UpdateGauge(ctx context.Context, name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockHandlerStorageMockRecorder) UpdateGauge(ctx, name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockHandlerStorage)(nil).UpdateGauge), ctx, name, value)
}
