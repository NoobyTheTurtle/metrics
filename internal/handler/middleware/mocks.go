// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/middleware/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/handler/middleware/interfaces.go -destination=internal/handler/middleware/mocks.go -package=middleware
//

// Package middleware is a generated GoMock package.
package middleware

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMiddlewareLogger is a mock of MiddlewareLogger interface.
type MockMiddlewareLogger struct {
	ctrl     *gomock.Controller
	recorder *MockMiddlewareLoggerMockRecorder
	isgomock struct{}
}

// MockMiddlewareLoggerMockRecorder is the mock recorder for MockMiddlewareLogger.
type MockMiddlewareLoggerMockRecorder struct {
	mock *MockMiddlewareLogger
}

// NewMockMiddlewareLogger creates a new mock instance.
func NewMockMiddlewareLogger(ctrl *gomock.Controller) *MockMiddlewareLogger {
	mock := &MockMiddlewareLogger{ctrl: ctrl}
	mock.recorder = &MockMiddlewareLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMiddlewareLogger) EXPECT() *MockMiddlewareLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockMiddlewareLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockMiddlewareLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockMiddlewareLogger)(nil).Info), varargs...)
}
