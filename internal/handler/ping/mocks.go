// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/ping/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handler/ping/interfaces.go -destination=./internal/handler/ping/mocks.go -package=ping
//

// Package ping is a generated GoMock package.
package ping

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDBPinger is a mock of DBPinger interface.
type MockDBPinger struct {
	ctrl     *gomock.Controller
	recorder *MockDBPingerMockRecorder
	isgomock struct{}
}

// MockDBPingerMockRecorder is the mock recorder for MockDBPinger.
type MockDBPingerMockRecorder struct {
	mock *MockDBPinger
}

// NewMockDBPinger creates a new mock instance.
func NewMockDBPinger(ctrl *gomock.Controller) *MockDBPinger {
	mock := &MockDBPinger{ctrl: ctrl}
	mock.recorder = &MockDBPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBPinger) EXPECT() *MockDBPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockDBPinger) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBPingerMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBPinger)(nil).Ping), ctx)
}

// MockPingLogger is a mock of PingLogger interface.
type MockPingLogger struct {
	ctrl     *gomock.Controller
	recorder *MockPingLoggerMockRecorder
	isgomock struct{}
}

// MockPingLoggerMockRecorder is the mock recorder for MockPingLogger.
type MockPingLoggerMockRecorder struct {
	mock *MockPingLogger
}

// NewMockPingLogger creates a new mock instance.
func NewMockPingLogger(ctrl *gomock.Controller) *MockPingLogger {
	mock := &MockPingLogger{ctrl: ctrl}
	mock.recorder = &MockPingLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPingLogger) EXPECT() *MockPingLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockPingLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockPingLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockPingLogger)(nil).Error), varargs...)
}
