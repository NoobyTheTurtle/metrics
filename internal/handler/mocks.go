// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/handler/interfaces.go -destination=./internal/handler/mocks.go -package=handler
//

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetricStorage is a mock of MetricStorage interface.
type MockMetricStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorageMockRecorder
	isgomock struct{}
}

// MockMetricStorageMockRecorder is the mock recorder for MockMetricStorage.
type MockMetricStorageMockRecorder struct {
	mock *MockMetricStorage
}

// NewMockMetricStorage creates a new mock instance.
func NewMockMetricStorage(ctrl *gomock.Controller) *MockMetricStorage {
	mock := &MockMetricStorage{ctrl: ctrl}
	mock.recorder = &MockMetricStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorage) EXPECT() *MockMetricStorageMockRecorder {
	return m.recorder
}

// GetAllCounters mocks base method.
func (m *MockMetricStorage) GetAllCounters() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCounters")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetAllCounters indicates an expected call of GetAllCounters.
func (mr *MockMetricStorageMockRecorder) GetAllCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCounters", reflect.TypeOf((*MockMetricStorage)(nil).GetAllCounters))
}

// GetAllGauges mocks base method.
func (m *MockMetricStorage) GetAllGauges() map[string]float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGauges")
	ret0, _ := ret[0].(map[string]float64)
	return ret0
}

// GetAllGauges indicates an expected call of GetAllGauges.
func (mr *MockMetricStorageMockRecorder) GetAllGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGauges", reflect.TypeOf((*MockMetricStorage)(nil).GetAllGauges))
}

// GetCounter mocks base method.
func (m *MockMetricStorage) GetCounter(name string) (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", name)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockMetricStorageMockRecorder) GetCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockMetricStorage)(nil).GetCounter), name)
}

// GetGauge mocks base method.
func (m *MockMetricStorage) GetGauge(name string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockMetricStorageMockRecorder) GetGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockMetricStorage)(nil).GetGauge), name)
}

// UpdateCounter mocks base method.
func (m *MockMetricStorage) UpdateCounter(name string, value int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", name, value)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockMetricStorageMockRecorder) UpdateCounter(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockMetricStorage)(nil).UpdateCounter), name, value)
}

// UpdateGauge mocks base method.
func (m *MockMetricStorage) UpdateGauge(name string, value float64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", name, value)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockMetricStorageMockRecorder) UpdateGauge(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockMetricStorage)(nil).UpdateGauge), name, value)
}

// MockRouterLogger is a mock of RouterLogger interface.
type MockRouterLogger struct {
	ctrl     *gomock.Controller
	recorder *MockRouterLoggerMockRecorder
	isgomock struct{}
}

// MockRouterLoggerMockRecorder is the mock recorder for MockRouterLogger.
type MockRouterLoggerMockRecorder struct {
	mock *MockRouterLogger
}

// NewMockRouterLogger creates a new mock instance.
func NewMockRouterLogger(ctrl *gomock.Controller) *MockRouterLogger {
	mock := &MockRouterLogger{ctrl: ctrl}
	mock.recorder = &MockRouterLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouterLogger) EXPECT() *MockRouterLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockRouterLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockRouterLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockRouterLogger)(nil).Info), varargs...)
}
