// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/persister/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/persister/interfaces.go -destination=./internal/persister/mocks.go -package=persister
//

// Package persister is a generated GoMock package.
package persister

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPersisterLogger is a mock of PersisterLogger interface.
type MockPersisterLogger struct {
	ctrl     *gomock.Controller
	recorder *MockPersisterLoggerMockRecorder
	isgomock struct{}
}

// MockPersisterLoggerMockRecorder is the mock recorder for MockPersisterLogger.
type MockPersisterLoggerMockRecorder struct {
	mock *MockPersisterLogger
}

// NewMockPersisterLogger creates a new mock instance.
func NewMockPersisterLogger(ctrl *gomock.Controller) *MockPersisterLogger {
	mock := &MockPersisterLogger{ctrl: ctrl}
	mock.recorder = &MockPersisterLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersisterLogger) EXPECT() *MockPersisterLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockPersisterLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockPersisterLoggerMockRecorder) Error(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockPersisterLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockPersisterLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockPersisterLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPersisterLogger)(nil).Info), varargs...)
}

// MockMetricsStorage is a mock of MetricsStorage interface.
type MockMetricsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsStorageMockRecorder
	isgomock struct{}
}

// MockMetricsStorageMockRecorder is the mock recorder for MockMetricsStorage.
type MockMetricsStorageMockRecorder struct {
	mock *MockMetricsStorage
}

// NewMockMetricsStorage creates a new mock instance.
func NewMockMetricsStorage(ctrl *gomock.Controller) *MockMetricsStorage {
	mock := &MockMetricsStorage{ctrl: ctrl}
	mock.recorder = &MockMetricsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsStorage) EXPECT() *MockMetricsStorageMockRecorder {
	return m.recorder
}

// SaveToFile mocks base method.
func (m *MockMetricsStorage) SaveToFile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToFile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveToFile indicates an expected call of SaveToFile.
func (mr *MockMetricsStorageMockRecorder) SaveToFile(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToFile", reflect.TypeOf((*MockMetricsStorage)(nil).SaveToFile), ctx)
}
