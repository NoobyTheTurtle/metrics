// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/collector/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/collector/interfaces.go -destination=./internal/collector/mocks.go -package=collector
//

// Package collector is a generated GoMock package.
package collector

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCollectorLogger is a mock of CollectorLogger interface.
type MockCollectorLogger struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorLoggerMockRecorder
	isgomock struct{}
}

// MockCollectorLoggerMockRecorder is the mock recorder for MockCollectorLogger.
type MockCollectorLoggerMockRecorder struct {
	mock *MockCollectorLogger
}

// NewMockCollectorLogger creates a new mock instance.
func NewMockCollectorLogger(ctrl *gomock.Controller) *MockCollectorLogger {
	mock := &MockCollectorLogger{ctrl: ctrl}
	mock.recorder = &MockCollectorLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorLogger) EXPECT() *MockCollectorLoggerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockCollectorLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockCollectorLoggerMockRecorder) Info(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockCollectorLogger)(nil).Info), varargs...)
}

// MockGopsutilMetrics is a mock of GopsutilMetrics interface.
type MockGopsutilMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockGopsutilMetricsMockRecorder
	isgomock struct{}
}

// MockGopsutilMetricsMockRecorder is the mock recorder for MockGopsutilMetrics.
type MockGopsutilMetricsMockRecorder struct {
	mock *MockGopsutilMetrics
}

// NewMockGopsutilMetrics creates a new mock instance.
func NewMockGopsutilMetrics(ctrl *gomock.Controller) *MockGopsutilMetrics {
	mock := &MockGopsutilMetrics{ctrl: ctrl}
	mock.recorder = &MockGopsutilMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGopsutilMetrics) EXPECT() *MockGopsutilMetricsMockRecorder {
	return m.recorder
}

// CollectGopsutilMetrics mocks base method.
func (m *MockGopsutilMetrics) CollectGopsutilMetrics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectGopsutilMetrics")
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectGopsutilMetrics indicates an expected call of CollectGopsutilMetrics.
func (mr *MockGopsutilMetricsMockRecorder) CollectGopsutilMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGopsutilMetrics", reflect.TypeOf((*MockGopsutilMetrics)(nil).CollectGopsutilMetrics))
}

// InitGopsutilMetrics mocks base method.
func (m *MockGopsutilMetrics) InitGopsutilMetrics(pollInterval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGopsutilMetrics", pollInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGopsutilMetrics indicates an expected call of InitGopsutilMetrics.
func (mr *MockGopsutilMetricsMockRecorder) InitGopsutilMetrics(pollInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGopsutilMetrics", reflect.TypeOf((*MockGopsutilMetrics)(nil).InitGopsutilMetrics), pollInterval)
}

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
	isgomock struct{}
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// CollectGopsutilMetrics mocks base method.
func (m *MockMetricsCollector) CollectGopsutilMetrics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectGopsutilMetrics")
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectGopsutilMetrics indicates an expected call of CollectGopsutilMetrics.
func (mr *MockMetricsCollectorMockRecorder) CollectGopsutilMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectGopsutilMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).CollectGopsutilMetrics))
}

// InitGopsutilMetrics mocks base method.
func (m *MockMetricsCollector) InitGopsutilMetrics(pollInterval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitGopsutilMetrics", pollInterval)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitGopsutilMetrics indicates an expected call of InitGopsutilMetrics.
func (mr *MockMetricsCollectorMockRecorder) InitGopsutilMetrics(pollInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitGopsutilMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).InitGopsutilMetrics), pollInterval)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsCollector) UpdateMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMetrics")
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsCollectorMockRecorder) UpdateMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsCollector)(nil).UpdateMetrics))
}
